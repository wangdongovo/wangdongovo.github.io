import{_ as p,V as o,W as c,X as n,Y as s,Z as e,$ as t,C as i}from"./framework-7d796c00.js";const r={},l=t(`<h1 id="react-18beta版" tabindex="-1"><a class="header-anchor" href="#react-18beta版" aria-hidden="true">#</a> React 18Beta版</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>React 18 包括对现有功能的开箱即用的改进。它也是第一个添加对并发功能支持的 React 版本，这让您可以以 React 以前不允许的方式改善用户体验，并发功能是可选的，可以逐渐采用</p><h1 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h1><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm install react@beta react<span class="token operator">-</span>dom@beta
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="root-api" tabindex="-1"><a class="header-anchor" href="#root-api" aria-hidden="true">#</a> Root API</h1><h2 id="react-17" tabindex="-1"><a class="header-anchor" href="#react-17" aria-hidden="true">#</a> React 17</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&#39;react-dom&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&#39;./index.css&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App&#39;</span><span class="token punctuation">;</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>React<span class="token punctuation">.</span>StrictMode<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>React<span class="token punctuation">.</span>StrictMode<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="react-18" tabindex="-1"><a class="header-anchor" href="#react-18" aria-hidden="true">#</a> React 18</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&#39;react-dom&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&#39;./index.css&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>

root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在 React 18 中发布遗留 API 有两个原因 希望避免用户升级到 React 18 并立即看到崩溃。相反，我们向旧的根 API 添加了一个警告，建议使用新 API。 一些应用程序可能会选择运行生产实验来比较旧根和新根，其中包括开箱即用的性能改进</p></blockquote><h1 id="开箱即用的改进" tabindex="-1"><a class="header-anchor" href="#开箱即用的改进" aria-hidden="true">#</a> 开箱即用的改进</h1><h2 id="自动批处理以减少渲染" tabindex="-1"><a class="header-anchor" href="#自动批处理以减少渲染" aria-hidden="true">#</a> 自动批处理以减少渲染</h2><p><code>setState</code>只在合成事件和钩子函数中是“异步”的，在原生事件和<code>setTimeout</code> 中都是同步的</p><p><code>setState</code> 的“异步”并不是说内部由异步代码实现，其实本身执行的过程和代码都是同步的，只是合成事件和钩子函数的调用顺序在更新之前，导致在合成事件和钩子函数中没法立马拿到更新后的值，形成了所谓的“异步”，当然可以通过第二个参数 <code>setState(partialState, callback)</code> 中的<code>callback</code>拿到更新后的结果</p><p><code>setState</code> 的批量更新优化也是建立在“异步”（合成事件、钩子函数）之上的，在原生事件和setTimeout 中不会批量更新，在“异步”中如果对同一个值进行多次<code>setState</code>，<code>setState</code>的批量更新策略会对其进行覆盖，取最后一次的执行，如果是同时<code>setState</code>多个不同的值，在更新时会对其进行合并批量更新</p><blockquote><p><code>useLayoutEffect</code>其函数签名与 <code>useEffect</code> 相同，但它会在所有的 DOM 变更之后同步调用 effect。可以使用它来读取 DOM 布局并同步触发重渲染。在浏览器执行绘制之前，<code>useLayoutEffect</code> 内部的更新计划将被同步刷新。</p></blockquote><p>尽可能使用标准的 <code>useEffect</code> 以避免阻塞视觉更新。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fetchSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">fetchSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token function">setCount</span> <span class="token punctuation">(</span> <span class="token parameter">c</span>  <span class="token operator">=&gt;</span>  c  <span class="token operator">+</span>  <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span> 
                <span class="token function">setFlag</span><span class="token punctuation">(</span><span class="token parameter">f</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>f<span class="token punctuation">)</span> 
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">useLayoutEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Commit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Render&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你在同一个点击事件中有两个状态更新，React 总是将它们分批处理到一个重新渲染中。，你会看到每次点击时，React 只执行一次渲染，尽管你设置了两次状态</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/550c775537204811a0fff801747fc2c8~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>React 18 之前，我们只在 React 事件处理程序期间批量更新。默认情况下，React 中不会对 promise、setTimeout、本机事件处理程序或任何其他事件中的更新进行批处理。</p><figure><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ef8a5a36dff40a6ac47828209afd3cc~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="不想自动批处理" tabindex="-1"><a class="header-anchor" href="#不想自动批处理" aria-hidden="true">#</a> 不想自动批处理</h2><p>某些代码可能依赖于在状态更改后立即从 DOM 中读取某些内容。对于这些用例，可以使用<code>ReactDOM.flushSync()</code>选择退出批处理</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> flushSync <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-dom&#39;</span>


<span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">flushSync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">setCount</span> <span class="token punctuation">(</span> <span class="token parameter">c</span>  <span class="token operator">=&gt;</span>  c  <span class="token operator">+</span>  <span class="token number">1</span> <span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token function">flushSync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">setFlag</span><span class="token punctuation">(</span><span class="token parameter">f</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>f<span class="token punctuation">)</span> 
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2f0971f6bd504648b004d0aa254b2311~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h1 id="并发功能" tabindex="-1"><a class="header-anchor" href="#并发功能" aria-hidden="true">#</a> 并发功能</h1><p><strong>React 18 将是第一个添加对并发功能的选择支持的 React 版本</strong></p><p>React 18 将添加新功能，例如startTransition、useDeferredValue、并发Suspense语义SuspenseList、 等。为了支持这些功能，React 添加了协作多任务、基于优先级的渲染、调度和中断等概念。</p>`,30),u={id:"suspense",tabindex:"-1"},d=n("a",{class:"header-anchor",href:"#suspense","aria-hidden":"true"},"#",-1),k={href:"https://github.com/reactwg/react-18/discussions/7",target:"_blank",rel:"noopener noreferrer"},v=t(`<p>在 Legacy Suspense 和 Concurrent Suspense 中，基本的用户体验是相同的。</p><p>在 React 16.x 中添加了对 Suspense 的基本支持。但它并不完全支持 Suspense——它没有完成我们在演示中展示的所有事情，比如延迟转换（即在继续进行状态转换之前等待数据解析），或占位符限制（通过限制嵌套的、连续的占位符的出现来减少 UI 抖动）或 SuspenseList（协调组件列表或网格的外观，例如按顺序流式传输它们</p><blockquote><p>用于数据的获取可以“等待”目标代码加载，并且可以直接指定一个加载页面，让它在用户等待的时候显示</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Suspense
        fallback<span class="token operator">=</span><span class="token punctuation">{</span>
          <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Loading 英雄联盟的英雄<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token punctuation">}</span>
      <span class="token operator">&gt;</span>
       
        <span class="token operator">&lt;</span>ProfileDetails resource<span class="token operator">=</span><span class="token punctuation">{</span>resource<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>Suspense fallback<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Loading 王者荣耀的英雄<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
          
          <span class="token operator">&lt;</span>ProfileTimeline resource<span class="token operator">=</span><span class="token punctuation">{</span>resource<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
          
        <span class="token operator">&lt;</span><span class="token operator">/</span>Suspense<span class="token operator">&gt;</span>
        
      <span class="token operator">&lt;</span><span class="token operator">/</span>Suspense<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0dbc948ab6fe4ddda58dc919960d379e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><figure><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0013adf2035549a6a2c9f094365c930c~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>`,6),m={id:"错误边界",tabindex:"-1"},g=n("a",{class:"header-anchor",href:"#错误边界","aria-hidden":"true"},"#",-1),b={href:"https://zh-hans.reactjs.org/docs/error-boundaries.html#gatsby-focus-wrapper",target:"_blank",rel:"noopener noreferrer"},f=n("p",null,"部分 UI 的 JavaScript 错误不应该导致整个应用崩溃，为了解决这个问题，React 16 引入了一个新的概念 —— 错误边界。",-1),h=n("p",null,[s("错误边界是一种 React 组件，这种组件"),n("strong",null,"可以捕获发生在其子组件树任何位置的 JavaScript 错误，并打印这些错误，同时展示降级 UI"),s("，而并不会渲染那些发生崩溃的子组件树。错误边界在渲染期间、生命周期方法和整个组件树的构造函数中捕获错误。")],-1),y=n("p",null,"注意",-1),w=n("p",null,[s("错误边界"),n("strong",null,"无法"),s("捕获以下场景中产生的错误：")],-1),j={href:"https://zh-hans.reactjs.org/docs/error-boundaries.html#how-about-event-handlers",target:"_blank",rel:"noopener noreferrer"},_=n("li",null,[s("异步代码（例如 "),n("code",null,"setTimeout"),s(" 或 "),n("code",null,"requestAnimationFrame"),s(" 回调函数）")],-1),x=n("li",null,"服务端渲染",-1),S=n("li",null,"它自身抛出来的错误（并非它的子组件）",-1),R=t(`<blockquote><p>在 Suspense 中，获取数据时抛出的错误和组件渲染时的报错处理方式一样——你可以在需要的层级渲染一个错误边界组件来“捕捉”层级下面的所有的报错信息</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ErrorComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">hasError</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token function">getDerivedStateFromError</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 更新 state 使下一次渲染能够显示降级后的 UI</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">hasError</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 你可以自定义降级后的 UI 并渲染</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>fallback<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>ErrorComponent fallback<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>子组件出错了<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>Suspense fallback<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Loading Banner<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>ProfileTimeline resource<span class="token operator">=</span><span class="token punctuation">{</span>resource<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Suspense<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>ErrorComponent<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c3496dde1b7942158f515acd73586256~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="suspenselist" tabindex="-1"><a class="header-anchor" href="#suspenselist" aria-hidden="true">#</a> SuspenseList</h2><p>用于控制Suspense组件的现实顺序</p><p><strong>加载顺序</strong></p><p><strong>together</strong>所有的Suspense一起展示</p><p><strong>forwards</strong>按照顺序显示Suspense</p><p><strong>backwards</strong>反序展示Suspense</p><p><strong>hidden</strong>不显示</p><p><strong>collapsed</strong>轮到自己在展示</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>SuspenseList revealOrder<span class="token operator">=</span><span class="token string">&quot;together&quot;</span><span class="token operator">&gt;</span>

    <span class="token operator">&lt;</span>Suspense fallback<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Loading 当前时间<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>ProfileDetails resource<span class="token operator">=</span><span class="token punctuation">{</span>resource<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Suspense<span class="token operator">&gt;</span>

    <span class="token operator">&lt;</span>Suspense fallback<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Loading Banner<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>ProfileTimeline resource<span class="token operator">=</span><span class="token punctuation">{</span>resource<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Suspense<span class="token operator">&gt;</span>

  <span class="token operator">&lt;</span><span class="token operator">/</span>SuspenseList<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/25d472c381b04e48bfa1ffa59da5c770~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="踩坑" tabindex="-1"><a class="header-anchor" href="#踩坑" aria-hidden="true">#</a> 踩坑</h2><p>安装rc版本，SuspenseList会显示找不到，从 TypeScript 编译器收到该错误，因为即使您已经安装了<code>react@rc</code>，您仍在使用<code>@types/react@17</code>. <code>SuspenseList</code>确实存在于实现中，但编译器不知道</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm install react@rc react<span class="token operator">-</span>dom@rc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要是报错如下呢：</p><figure><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/af2eefead5f64d45814e0fd323825a6c~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>解决方案如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm install react@experimental react<span class="token operator">-</span>dom@experimental
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者 如果您<code>tsconfig.json</code>已经<code>&quot;types&quot;</code> 在该<code>&quot;compilerOptions&quot;</code>部分中有一个数组，则添加<code>&quot;react/experimental&quot;</code>到该<code>&quot;types&quot;</code>数组中</p><h2 id="starttransition让您在状态转换期间保持-ui-响应。" tabindex="-1"><a class="header-anchor" href="#starttransition让您在状态转换期间保持-ui-响应。" aria-hidden="true">#</a> <code>startTransition</code>让您在状态转换期间保持 UI 响应。</h2><p><strong>作用：标记某个更新为transition</strong></p><p>与<code>setTimeout</code>不同的是，<code>startTransition</code>并不会延迟调度，而是会立即执行，<code>startTransition</code>接收的函数是同步执行的，只是这个update被加了一个“transitions&quot;的标记。而这个标记，React内部处理更新的时候是会作为参考信息的。这就意味着，相比于<code>setTimeout</code>， 把一个update交给<code>startTransition</code>能够更早地被处理。而在于较快的设备上，这个过度是用户感知不到的</p><h3 id="状态更新分成两种" tabindex="-1"><a class="header-anchor" href="#状态更新分成两种" aria-hidden="true">#</a> 状态更新分成两种</h3><p><strong>Urgent updates</strong> 紧急更新，指直接交互。如点击、输入、滚动、拖拽等 <strong>Transition updates</strong> 过渡更新，如UI从一个视图向另一个视图的更新</p><p><strong>使用场景</strong></p><p><code>startTransition</code>可以用在任何你想更新的时候。</p><p>渲染慢：如果你有很多没那么着急的内容要渲染更新。</p><p>网络慢：如果你的更新需要花较多时间从服务端获取。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Button type<span class="token operator">=</span><span class="token string">&quot;primary&quot;</span> size<span class="token operator">=</span><span class="token string">&quot;small&quot;</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">startTransition</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setResource</span><span class="token punctuation">(</span><span class="token function">fetchProfileData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用前会有loading展示</p><figure><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/40d1d85420394d748d97efa5de1198be~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>使用后直接过渡到数据更新后的视图，中间没有闪烁</p><figure><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d025ba947128482cb60f0701ff0bc2a2~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p><strong>双缓冲</strong><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2960a2b732e34523958c31f113e25abb~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" loading="lazy"></p><h2 id="usetransition" tabindex="-1"><a class="header-anchor" href="#usetransition" aria-hidden="true">#</a> useTransition</h2><p>使用startTransition更新状态的时候，用户可能想要知道transition的实时情况，这个时候可以使用React提供的hook api <code>useTransition</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useTransition <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Button</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span>afresh<span class="token punctuation">}</span> <span class="token operator">=</span> props
    <span class="token keyword">const</span> <span class="token punctuation">[</span>isLoading<span class="token punctuation">,</span> startTransition<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useTransition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span><span class="token punctuation">(</span>
        <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>button disabled<span class="token operator">=</span><span class="token punctuation">{</span>isLoading<span class="token punctuation">}</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">startTransition</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">afresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>重新获取数据<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Button
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据没有更新前，按钮为不可点击状态 <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0e67b6a2f9794be0befd937866728f72~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" loading="lazy"></p><h2 id="usedeferredvalue让您推迟更新屏幕上不太重要的部分。" tabindex="-1"><a class="header-anchor" href="#usedeferredvalue让您推迟更新屏幕上不太重要的部分。" aria-hidden="true">#</a> <code>useDeferredValue</code>让您推迟更新屏幕上不太重要的部分。</h2><h1 id="相关资源链接" tabindex="-1"><a class="header-anchor" href="#相关资源链接" aria-hidden="true">#</a> 相关资源链接</h1>`,43),q={href:"https://github.com/reactwg/react-18/discussions/9",target:"_blank",rel:"noopener noreferrer"},T={href:"https://conf.reactjs.org/",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com/reactwg/react-18/discussions/5",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github.com/reactwg/react-18/discussions/7",target:"_blank",rel:"noopener noreferrer"},C={href:"https://github.com/reactwg/react-18/discussions/37",target:"_blank",rel:"noopener noreferrer"};function z(I,D){const a=i("ExternalLinkIcon");return o(),c("div",null,[l,n("h2",u,[d,s(),n("a",k,[s("Suspense"),e(a)])]),v,n("h2",m,[g,s(),n("a",b,[s("错误边界"),e(a)])]),f,h,y,w,n("ul",null,[n("li",null,[s("事件处理（"),n("a",j,[s("了解更多"),e(a)]),s("）")]),_,x,S]),R,n("p",null,[n("a",q,[s("React 18 发布计划"),e(a)]),n("a",T,[s("React Conf "),e(a)]),n("a",L,[s("用 createRoot 替换渲染"),e(a)]),n("a",E,[s("React 18 中 Suspense 的行为变化"),e(a)]),n("a",C,[s("全新 Suspense SSR 架构"),e(a)])])])}const A=p(r,[["render",z],["__file","react-18-beta.html.vue"]]);export{A as default};
