import{_ as o,V as c,W as r,X as e,Y as i,Z as t,$ as n,C as d}from"./framework-7d796c00.js";const p={},l=e("h1",{id:"浅述rn开发app",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#浅述rn开发app","aria-hidden":"true"},"#"),i(" 浅述RN开发APP")],-1),s=e("p",null,[e("strong",null,"需要安装的依赖有：Node、Watchman、Xcode 和 CocoaPods")],-1),f=e("hr",null,null,-1),g={id:"cocoapods",tabindex:"-1"},b=e("a",{class:"header-anchor",href:"#cocoapods","aria-hidden":"true"},"#",-1),u={href:"https://cocoapods.org/",target:"_blank",rel:"noopener noreferrer"},h=e("figure",null,[e("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c80b37e48a654892b8fa806b0668ba1f~tplv-k3u1fbpfcp-zoom-1.image",alt:"",tabindex:"0",loading:"lazy"}),e("figcaption")],-1),m=e("li",null,"CocoaPods 是 Swift 和 Objective-C Cocoa 项目的依赖管理器",-1),v=e("li",null,"CocoaPods 管理 Xcode 项目的库依赖项",-1),_=e("li",null,"项目的依赖项在称为 Podfile 的单个文本文件中指定。CocoaPods 将解析库之间的依赖关系，获取生成的源代码，然后在 Xcode 工作区中将它们链接在一起以构建您的项目。",-1),k={href:"https://cocoapods.org/",target:"_blank",rel:"noopener noreferrer"},x={id:"metro",tabindex:"-1"},j=e("a",{class:"header-anchor",href:"#metro","aria-hidden":"true"},"#",-1),y={href:"https://facebook.github.io/metro/",target:"_blank",rel:"noopener noreferrer"},z=e("figure",null,[e("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/46e5951813f54eea853e0f6c51960609~tplv-k3u1fbpfcp-zoom-1.image",alt:"",tabindex:"0",loading:"lazy"}),e("figcaption")],-1),S=e("p",null,[e("strong",null,"React Native 的 JavaScript 打包器")],-1),w=e("ul",null,[e("li",null,"快速启动和快速捆绑"),e("li",null,"缓存构建并执行模块替换重新加载"),e("li",null,"在单个应用程序中使用数千个模块"),e("li",null,"开箱即用地支持每个 React Native 项目")],-1),N=e("h1",{id:"初始化项目",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#初始化项目","aria-hidden":"true"},"#"),i(" 初始化项目")],-1),R={id:"参考文档",tabindex:"-1"},T=e("a",{class:"header-anchor",href:"#参考文档","aria-hidden":"true"},"#",-1),J={href:"https://www.react-native.cn/docs/environment-setup/",target:"_blank",rel:"noopener noreferrer"},C=n(`<h2 id="创建项目" tabindex="-1"><a class="header-anchor" href="#创建项目" aria-hidden="true">#</a> 创建项目</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npx react-native init MyDuck
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pod install
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>按照官方文档创建项目之后需要在ios文件夹下面安装ios应用需要的依赖包，需要网好能正常访问github（依赖包需要去github上拉下来），部分依赖的包可能一次下不完整，多下载几次就行了，（在模拟器运行的时候缺少的包会有提示）</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/120884bd779443fd82c52f782a882189~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="预览" tabindex="-1"><a class="header-anchor" href="#预览" aria-hidden="true">#</a> 预览</h2><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffbca22acb9c4e13b49043e72cd30660~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="rn解析" tabindex="-1"><a class="header-anchor" href="#rn解析" aria-hidden="true">#</a> RN解析</h1><h2 id="架构" tabindex="-1"><a class="header-anchor" href="#架构" aria-hidden="true">#</a> 架构</h2><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b1c3f88e60c74f9db81cfd03d226c649~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>JS代码层提供了React.js支持</li><li>React.js的JSX代码转化为JS代码运行在JavaScriptCore提供的 JavaScript 运行时环境中</li><li>通信层将 JavaScript 与 Native 层连接起来</li><li>通信层又可以分为三部分，</li></ul><p>其中Shadow Tree 用来定义 UI 效果及交互功能、</p><p>Native Modules 提供 Native 功能（比如相册、蓝牙等）、</p><p>而他们之间的相互通信 使用的是JSON 异步消息</p><h2 id="线程" tabindex="-1"><a class="header-anchor" href="#线程" aria-hidden="true">#</a> 线程</h2><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/54eea28d2a2b45429a3a47485bd6b3db~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>RN 运行时会创建三个线程：JS Thread、Shadow Thread、Main Thread，在这三个线程中分别会创建三棵树，JS线程中会创建一棵树叫做Fiber Tree，在Shadow线程中会创建一棵树叫做Shadow Tree，在UI线程中则是View Tree。其中，Fiber Tree在JS侧创建，Shadow Tree和View Tree在Native侧创建</p><ul><li><strong>JS Thread</strong>：主要负责 React、JS的执行，输出 App 的视图信息（结构、样式、属性等）</li><li><strong>Shadow Thread</strong>：根据 JS 线程的视图信息，创建出用于布局计算的 ShadowTree；(主要用到UIManagerModule，是RN中非常重要的Native Module</li><li><strong>Main Thread：</strong> 根据 ShadowTree 提供的完整视图信息，负责真实 Native View 的创建</li></ul><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/75cce4b2e3354ac485a80547ab674608~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>通过React.js的JSX定义UI结构</li><li>编译阶段，通过 Babel 将 JSX 转化为 React.createElement的形态</li><li>在JS侧，通过深度优先遍历将JSX编写的UI组件转化为Fiber Tree结构，每个组件节点都包含子组件、父组件和兄弟组件的引用</li><li>JS侧在创建Fiber Tree各个节点的时候会通过Bridge桥向Native侧发送对应的指令，Native侧收到这些指令之后会创建对应的Shadow Tree节点，同时会生成对应的UIViewOperation，加入到UIViewOperationQueue中，以供在UI线程进行真正的UI操作。JS侧发送完一批UI指令之后会触发Native侧的onBatchComplete回调，进而后序遍历ShadowTree，分别计算每个节点的宽度和高度，然后前序遍历ShadowTree，确定每个节点的最终位置，生成相应的UpdateLayoutOperation，加入到UIViewOperationQueue中</li><li>触发FrameCallback，从UIViewOperationQueue中依次取出UIViewOperation，生成对应的View Tree，挂载到RootView，进行原生UI渲染逻辑</li></ul><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/74b759ab49ad4ece97c25b743c194d42~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果 JavaScript 线程需要访问一些本地模块（例如蓝牙），它需要向本地线程发送消息。JS 线程将向Bridge发送一个序列化的 JSON 消息。Bridge将优化此消息并将其发送到Native线程。消息将在Native线程上进行解码，最终将执行所需的本机代码</p>`,23),I={id:"导航",tabindex:"-1"},P=e("a",{class:"header-anchor",href:"#导航","aria-hidden":"true"},"#",-1),O={href:"https://reactnavigation.org/",target:"_blank",rel:"noopener noreferrer"},U=n('<figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9912e57ab6604c8c93d57245bcd3f8fb~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>React Native 没有像 Web 浏览器那样内置的全局历史堆栈概念</li><li>原生堆栈导航器为应用程序提供了一种在屏幕之间转换和管理导航历史记录的方法。</li><li>概念上类似于 Web 浏览器处理导航状态的方式 - 您的应用程序在用户与其交互时从导航堆栈中推送和弹出项目，这会让用户看到不同的屏幕</li></ul><h2 id="navigationcontainer导航容器" tabindex="-1"><a class="header-anchor" href="#navigationcontainer导航容器" aria-hidden="true">#</a> NavigationContainer导航容器</h2><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5ba66d5833a6491eaaa92867e7408cfc~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="screen屏幕" tabindex="-1"><a class="header-anchor" href="#screen屏幕" aria-hidden="true">#</a> Screen屏幕</h2><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/796a157bf8ee4694982e40a6d40da9dd~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',6),V=e("li",null,"navigate- 转到另一个屏幕，找出它需要采取的行动",-1),M=e("li",null,"reset- 擦除导航器状态并将其替换为新路线",-1),B=e("li",null,"goBack- 关闭活动屏幕并移回堆栈",-1),X=e("li",null,"setParams- 更改路线的参数",-1),E={href:"https://reactnavigation.org/docs/navigation-state",target:"_blank",rel:"noopener noreferrer"},L=e("li",null,"setOptions- 更新屏幕的选项",-1),F=e("li",null,"isFocused- 检查屏幕是否聚焦",-1),A=e("li",null,"addListener- 订阅来自导航器的事件更新",-1),W=n(`<h1 id="网络请求" tabindex="-1"><a class="header-anchor" href="#网络请求" aria-hidden="true">#</a> 网络请求</h1><p>在 React Native 中建立在两个 API 之上：fetch和XMLHttpRequest. 这两者都被设计为与浏览器 API 兼容，因此：</p><ul><li>Web 开发人员不必学习一种新的方式来发出网络请求</li><li>React Native 中基于这些功能构建的库</li><li>直接使用 API 很常见fetch，因为它相当强大且高级。直接使用 XMLHttpRequest 很少见，因为它复杂且低级。如果您的网络需求是高级的（多部分表单请求等），您可能希望使用一个库来抽象这些网络 API 的详细信息。</li><li>如果你正在寻找一个抽象层，浏览器/节点网络库喜欢axios并且superagent仍然可以在 React Native 中工作。</li><li>Fetch 还接受一个可选的第二个参数，允许您自定义 HTTP 请求。您可能想要指定其他标头，或发出 POST 请求</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>useEffect(() =&gt; {
  fetch(&#39;http://10.0.24.98:3000/dynamic/list&#39;)
    .then(response =&gt; response.json())
    .then(responseJson =&gt; {
    if (responseJson.code === 200) {
      setList(responseJson.data)
    }
  })
    .catch(error =&gt; {
    console.error(error)
  })
  console.log(&#39;进来动态页面了&#39;)
  }, [])
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/577589a5a92943a9b2e9fdea7bf03132~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="原生能力调用的区别" tabindex="-1"><a class="header-anchor" href="#原生能力调用的区别" aria-hidden="true">#</a> 原生能力调用的区别</h1>`,6),H={id:"webviewjavascriptbridge",tabindex:"-1"},D=e("a",{class:"header-anchor",href:"#webviewjavascriptbridge","aria-hidden":"true"},"#",-1),Q={href:"https://github.com/marcuswestin/WebViewJavascriptBridge",target:"_blank",rel:"noopener noreferrer"},q=n('<p>通过拦截 URL 请求来达到 native 端和 webview 端相互通信的</p><ol><li>native 端注册 jsb</li><li>webview 侧创建 iframe，设置 src 为__bridge_load__</li><li>native 端捕获请求，注入 jsb 初始化代码，在 window 上挂载相关对象和方法</li><li>webview 侧调用callHandler方法，并在responseCallback上添加callbackId: responseCallback，并修改 iframe 的 src，触发捕获</li><li>native 收到 message，生成一个responseCallback，并执行 native 侧注册好的方法</li><li>native 执行完毕后，通过 webview 执行_handleMessageFromObjC方法，取出 callback 函数，并执行</li></ol><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/94897a2457e747ba8564c47e0d05c7c4~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="创建原生模块有两种方式" tabindex="-1"><a class="header-anchor" href="#创建原生模块有两种方式" aria-hidden="true">#</a> 创建原生模块有两种方式</h2><h3 id="在-react-native-应用程序中直接实现原生模块" tabindex="-1"><a class="header-anchor" href="#在-react-native-应用程序中直接实现原生模块" aria-hidden="true">#</a> 在 React Native 应用程序中直接实现原生模块</h3><p>App第一次下载打开的时候需要同意隐私协议之类的，同意进入应用不同意退出应用，退出应用这个操作前端是没办法搞的，需要Native端的支持（正常开发中需要安卓同学和IOS的同学支持）</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab119e07753c4d5f9350f5213295fced~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在RN中“原生模块”就是一个实现了“RCTBridgeModule”协议的 Objective-C 类</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4cd16829b5bc4de097c563e0381491bb~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>实现RCTBridgeModule协议，你的类需要包含RCT_EXPORT_MODULE()宏。这个宏也可以添加一个参数用来指定在 JavaScript 中访问这个模块的名字</p><p>声明要给 JavaScript 导出的方法，否则 React Native 不会导出任何方法。声明通过RCT_EXPORT_METHOD()宏</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8ce5c60d619a4e6bb61cf8cfc6435902~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在js中调用这个类的方法</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d194453ea8874b4c89d899bec339ada1~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/06f1cdb6aaef4159bb5f7238e01358f1~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在xcode里面调试JS的调用</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/935ebcd031714a899efc7fa3e22246e9~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="使用npm-包-可以由您-其他-react-native-应用程序作为依赖项安装" tabindex="-1"><a class="header-anchor" href="#使用npm-包-可以由您-其他-react-native-应用程序作为依赖项安装" aria-hidden="true">#</a> 使用NPM 包，可以由您/其他 React Native 应用程序作为依赖项安装</h3>',18),Y={href:"https://js.coach/?collection=React+Native",target:"_blank",rel:"noopener noreferrer"},Z=n('<p>跟前端中引入功能模块差不多，正式开发中需要测试双端的支持能力</p><p>注意下载包之后需要在ios项目中再啦一次要不然ios源码里面没这个</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3cb423097bd942ce906b597fa4fc80de~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>剪贴板使用场景</p><p>npm i @react-native-clipboard/clipboard</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/77009b7e6bf94fca93cf5bd0683f0a33~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c981a246ba544b2b962039eb728f0666~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b723930c71b4db1be6af8e9559a4ccf~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="打包" tabindex="-1"><a class="header-anchor" href="#打包" aria-hidden="true">#</a> 打包</h1>',9),$={id:"有开发者账号的情况下",tabindex:"-1"},G=e("a",{class:"header-anchor",href:"#有开发者账号的情况下","aria-hidden":"true"},"#",-1),K={href:"https://help.apple.com/developer-account/#/dev2b5e6d209",target:"_blank",rel:"noopener noreferrer"},ee=n('<h2 id="无开发者账号情况下" tabindex="-1"><a class="header-anchor" href="#无开发者账号情况下" aria-hidden="true">#</a> 无开发者账号情况下</h2><p>在xcode中Product---》build</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d51910712b6c4b1cae636126eb87085d~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>找到打包好的文件</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/39138588fb9e4daea6fcef0d23c2b02a~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>创建一个Payload的文件夹把上图的文件复制放进去</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/78be1ca130ab4c369496b1d7dad6ba02~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>压缩并修改扩展名为ipa</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/56a567edf5e54609aa1f96487c59f735~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>使爱思助手签名ipa包</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0e429ce051a04c36b34e533da67f5e6a~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>把签名成功的包拖进来安装</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9856bc87ba2843b99b7dcb657a2d67e2~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>需要在手机端信任一下，这种办法的签名只能用7天，在用</p>',14);function ie(ae,te){const a=d("ExternalLinkIcon");return c(),r("div",null,[l,s,f,e("h2",g,[b,i(),e("a",u,[i("CocoaPods"),t(a)])]),h,e("ul",null,[m,v,_,e("li",null,[e("a",k,[i("CocoaPods"),t(a)]),i("是用 Ruby 编写的包管理器（可以理解为针对 iOS 的 npm）。从 0.60 版本开始 react native 的 iOS 版本需要使用 CocoaPods 来管理依赖. (需要科学上网的工具, 中间花费的时间可能会很长)")])]),e("h2",x,[j,i(),e("a",y,[i("Metro"),t(a)])]),z,S,w,N,e("h2",R,[T,i(),e("a",J,[i("参考文档"),t(a)])]),C,e("h1",I,[P,i(),e("a",O,[i("导航"),t(a)])]),U,e("ul",null,[V,M,B,X,e("li",null,[i("dispatch- 发送一个动作对象来更新"),e("a",E,[i("导航状态"),t(a)])]),L,F,A]),W,e("h2",H,[D,i(),e("a",Q,[i("WebViewJavascriptBridge"),t(a)])]),q,e("p",null,[e("a",Y,[i("https://js.coach/?collection=React+Native"),t(a)])]),Z,e("h2",$,[G,i(),e("a",K,[i("有开发者账号的情况下"),t(a)])]),ee])}const oe=o(p,[["render",ie],["__file","rn-base.html.vue"]]);export{oe as default};
